knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x,y=input$y,colot="species"))+
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x,y=input$y,color="species"))+
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
names(homerange)
View(homerange)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
selectInput("y", "Select Y Variable", choices = c("locomotion"),
selected = "locomotion"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x,y=input$y))+
geom_bar()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
selectInput("y", "Select Y Variable", choices = c("locomotion"),
selected = "locomotion"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x,color="locomotion"))+
geom_bar()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
selectInput("y", "Select Y Variable", choices = c("locomotion"),
selected = "locomotion"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x,fill="locomotion"))+
geom_bar()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
selectInput("y", "Select Y Variable", choices = c("locomotion"),
selected = "locomotion"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x,fill="locomotion"))+
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x,fill="locomotion"))+
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ggplot(data = homerange, aes_string(x=input$x,fill="locomotion"))+
geom_bar(position = "dodge",alpha=0.8,color="black")+
labs(x=NULL,fill="Fill Variable")+
theme_light(base_size = 18)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ggplot(data = homerange, aes_string(x="locomotion",fill=input$x))+
geom_bar(position = "dodge",alpha=0.8,color="black")+
labs(x=NULL,fill="Fill Variable")+
theme_light(base_size = 18)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x="locomotion",fill=input$x))+
geom_bar(position = "dodge",alpha=0.8,color="black")+
labs(x=NULL,fill="Fill Variable")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x="locomotion",fill=input$x))+
geom_bar(position = "dodge",alpha=0.8,color="black")+
labs(x=NULL,fill="Fill Variable")
})
}
shinyApp(ui, server)
runApp('~/aaa')
pwd
pwd()
setwd("~/Documents/GitHub/BIS15W2024_edu/lab14")
runApp('~/aaa')
runApp()
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
library(shiny)
ui<-fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x","Select Taxon",
choices = c("birds","lake fishes","lizards","mammals","marine fishes","river fishes","snakes","tortoises","turtles"), selected = "birds"),
plotOutput("plot",width = "600px",height = "500px")
)
server<- function(input, output,session){
output$plot<- renderPlot({
homerange%>%
filter(taxon=input$x)%>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue",color="black",alpha=0.8)
})
}
library(shiny)
ui<-fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x","Select Taxon",
choices = c("birds","lake fishes","lizards","mammals","marine fishes","river fishes","snakes","tortoises","turtles"), selected = "birds"),
plotOutput("plot",width = "600px",height = "500px")
)
server<- function(input, output,session){
output$plot<- renderPlot({
homerange%>%
filter(taxon=input$x)%>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue",color="black",alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui<-fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x","Select Taxon",
choices = c("birds","lake fishes","lizards","mammals","marine fishes","river fishes","snakes","tortoises","turtles"), selected = "birds"),
plotOutput("plot",width = "600px",height = "500px")
)
server<- function(input, output,session){
output$plot<- renderPlot({
homerange%>%
filter(taxon==input$x)%>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue",color="black",alpha=0.8)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui<-dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x,y=input$y,color="species"))+
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui<-dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x,y=input$y,color="species"))+
geom_point(size=input$pointsize)+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
})
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output,session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data = wolves,aes_string(x=input$x,color="pop"))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Pop."),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x","Select Population",choices = unique(wolves$pop)),hr()),
box(width = 7,
plotOutput("plot",width = "600px",height = "400px"))
)
)
)
server <- function(input, output,session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop==input$x)%>%
ggplot(aes(x=sex,fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
install.packages("shinythemes")
library("shinythemes")
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
